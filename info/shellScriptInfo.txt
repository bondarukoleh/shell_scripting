Script
Command line programm that contains a series of commands.
Shell access the interpreter and executes commands in script one by another.
Script either in PATH variable (you can execute it from everywhere) or you can execute in with "./path_to_script/scr.sh"

# (sharp) ! (bang) (shebang) /usr/bin/env bash (path to interpreter for commands listened in file, depends on OS)
There a few interpreters /bin/csh, ksh, zsh. Or even #!/usr/bin/pyton #!/usr/bin/node

If you do not adding shebang - that script will be executed by default shell in OS, witch can cost problems,
maybe your shell by default is ok, but you don't know nothing about other guys.

VARIABLES
VARIABLE_NAME="value" - no spaces, by convention variable name in upper case. Case sencetive.
Without quotes only text without spaces, can contain "_" and digits, but not start from digits.
To use variable put "My $VAR_NAME string" before name, ore "My ${VAR_NAME} string"

CONDITIONS
We can create conditions:
if [ condition_to_test && condition_to_test ]  
then
  command1
  command2
elseif [ next_condition_to_test || next_condition_to_test ]
then
  command3
  command4
else
  command5
  command6
fi (if spelled backwards)

Note: we can use AND vs OR in our commands, like $>cp text.txt /tmp/inner || cp text.txt /tmp
if /tmp/inner folder doesn't exists - it will copy to /tmp.
 (sic!) - Command after AND will be executed only if previous returned 0;
 (sic!) - Command after OR will be executed only if previous returned 1;
Also we can use condition statements in terminal $>[ -d ./dor_path_to_check ] && do_something (if dir exists - action)
But aware that "success" || "not_runned" && "runned" - if success - that it passes next OR and run next AND.

If we meet conditions - condition return true, and command exits with status 0, if not - false - 1 status.

Conditions:
-d $FILE - FILE is directory? 
-e $FILE - FILE is existing file? 
-f $FILE - FILE is regular file? 
-r $FILE - FILE is readable file by user? 
-s $FILE - FILE is not empty file? 
-w $FILE - FILE is writable file by user? 
-x $FILE - FILE is executable file by user? 

-z $STRING - STRING is empty?
-n $STRING - STRING is not empty?
$STRING1 = $STRING2 - are strings equal?
$STRING1 != $STRING2 - are strings not equal?

$ARG1 -eq $ARG2 - are args equal?
$ARG1 -ne $ARG2 - are args not equal?
$ARG1 -lt $ARG2 - is arg1 is less than arg2?
$ARG1 -le $ARG2 - is arg1 is less than or equal arg2?
$ARG1 -gt $ARG2 - is arg1 is greater than arg2?
$ARG1 -ge $ARG2 - is arg1 is greater than or equal arg2?

Boolean Operator     Numeric     String  
===================  =======     ======  
Equals                 -eq        =      
Not Equals             -ne        !=     
Greater Than           -gt        >      
Less Than              -lt        <      
Greater or Equals      -ge        >=     
Less Than or Equals    -le        <= 


LOOP
for VAR_NAME in ARRAY
do
  command1
  command2
done


PASSED ARGUMENTS
./script.sh arg1 arg2=value
$0:"script.sh" (same as ${0})
$1:"arg1"
$2:"arg2=value"
$@:"arg1 arg2=value"

So 0 argument - is useless in most cases from my side, it's pointing on script that was passed to bash

STDIN
We can read from stdin
read -p "Text of prompt (hint) what you are expecting user should input" VARIABLE_TO_STORE_USERS_INPUT

read -p "Please enter your name: " USER_NAME
echo "You're name is $USER_NAME"


EXIT STATUS
Every command return an exit status, integer range 0 to 255
Exit code != 0 is stand for some error.

$? - contains previous command exit code
ls
$? = 0

We can set the exit status of script we running.
...
if [ some_command_failed ]
then 
  exit 1
fi
...

If we don't use exit in our script - last command exit code will be used for entire script.
Whenever exit command is reached in script - it stops running.
We can print "$?" even when script has run already, no matter when,
it allways keep status of previous command.

SEMICOLON
We can concatinate several commands with ";"
$>do_something ; do_something_else ; do_third ;
$? - exit status - will be the last exit status of command in sequence.
Everything will be executed no matter exit status.

FUNCTIONS
function name(){}
name(){}



